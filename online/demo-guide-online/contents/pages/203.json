{"id":203,"title":"Cilogi Technology","guideName":"demo-guide","pageLinks":[],"metaData":{"index":["203"]},"etag":"c8232f8a62828fd302cfb852ec4dc97c","text":"Cilogi provides a platform for the creation and delivery of mobile\nguides to museums, galleries, gardens and other collections. \n\nWe provide an efficient way for collections to provide first class\ninformation to visitors, and to earn a significant income via an\nintegrated shop.\n\nA sample guide (not complete but showing all features can be found\n[here](../../http://goo.gl/V8ZX3). This guide is _not_ offline.\n\nThe principal features of our platform are:\n\n1. Guides are web applications containing text, images, audio and\n   video, running on high-end mobile phones;\n\n2. Visitors access guides by capturing a QR code on camera or entering\n   a short URL by keyboard. Browsing starts immediately at any point\n   in the guide. You don't have to go through a gateway, or download\n   an application;\n\n\n2. A short numeric code can be entered with an on-screen keypad to get\n   information about an specific which has a physical label with\n   the code;\n\n     ![A keypad (with label shown as overlay) provides instant access to exhibits](../../media/images/keypad-code.png)\n\n3. Guides contain an integrated shop which provides offers\n   for individual exhibits, and immediate in-guide purchasing;\n\n3. Guides provide detailed analytics about their use, so you can see\n   what what visitors do, and what they are interested in.\n\n4. Guides run offline, without an Internet connection.  They work\n   inside buildings when you are out of 3G and WiFi range.\n\n5. Guides are fully integrated with Wikipedia and other public\n   information sources. This lets you both enrich the information\n   provided to visitors and enables collaborative engagement with the\n   visitor community.\n\n6. Guides are created using a simple file-based\n   content management system (CMS). You can create a guide just by\n   entering text in your preferred editor and dropping images into a\n   directory on your computer; \n\n6. Guides are free -- Cilogi does not charge for creation or delivery.\n   We can do this because our platform is efficient and because we\n   take a small fee from items sold in the shop.\n\nLet's look at these features in more detail.\n\n## Guides as Web Applications\n\nA variety of mobile guides to Museums and other collections have been\nproduced. These have exclusively been developed as _apps_, mainly for\nthe iPhone. \n\nOur guides are HTML5 mobile websites (sometimes called web apps).\nThere are several reasons for choosing websites over apps.\n\n* Websites are part of the web.  You can access any page of\n  a website via a public URL.  This lets you jump right into a guide\n  at any page.\n* Websites cover a wider range of devices whereas apps are for a\n  single platform.  Mobile apps which run multi-platform are usually\n  just a wrapper round a website (see PhoneGap for example).\n* It is possible to make payments from mobile websites without having\n  to pay Apple a tax of 30%.\n\nThe two main advantages of apps are that developers can easily get\npaid for them, and that in an app you have access to phone capabilities,\nsuch as the camera, that you don't from the web browser.  Neither of\nthese apply to our guides as they are free, and we don't need access\nto phone capabilities.\n\n## Discovery via QR codes and URLs\n\nHow do you get to find out about a guide?  Our solution is to provide\n[QR codes](../..//wiki.html?target=QR_code) and\n[short code URLs](../..//wiki.html?target=URL_shortener)\nthroughout the collection.  A QR code leads to the guide when you take\na picture of it with the phone's camera; a short code URL can be typed\nin with little effort. \n\nThese codes can be placed on exhibits, wherever there is space.  In a\ngarden for example we may place a QR code on small label on a\ntree. The web page to which this leads will describe the tree (or\nother exhibit), and from this page the whole guide is available, as\nshown in the image below, which is from\n[this page](../../http://xstatic.s3-website-eu-west-1.amazonaws.com/tim@timniblett.net/botanics/contents/trail/weeping-ash.html). \n\n![Weeping Ash from the Glasgow Botanics Gardens](../../media/images/weeping-ash.jpg)\n\nA page linked in this way provides a seamless and elegant means of\nentering a guide, even for visitors who may not have intended using\nthe guide in the first instance.\n\n## Keypad to navigate directly to exhibits\n\nOnce the guide has been launched simple numeric codes can be used to\nmove directly to pages for individual exhibits.  All that is required\nis for the number to be placed with the exhibit.\n\n![A keypad (with label shown as overlay) provides instant access to exhibits](../../media/images/keypad-code.png)\n\nThe advantage of a small code is that is can be placed discreetly with\nsmall exhibits, so that items in a crowded display case can be\nindividually located and examined.  For many collections this is a\nsignificant issue as display cases contain many exhibits and there is\nsimple not room to provide adequate signage for all of them.\n\n## An integrated shop\n\nYou are most likely to buy something when you're looking at an\nexhibit, your enthusiasm is sparked, and you'd like to follow this up,\nusually by buying something. Our guides let you do this by saying\nwhich item(s) is(are) likely to be of interest for any exhibit. In a\ngallery this might be a framed print of the picture you're looking at,\nor a book about the artist who painted the picture.  In a garden it\nmay be the opportunity to buy a cutting, or seeds for, a particular\nplant.\n\nPurchases are made via PayPal.  Other mobile-capable gateways will be\nintroduced over time.  The critical features of a payment method are\nthat (a) you don't need to worry about security, (b) you don't\nhave to input more than the minimum of personal details (email and\npassword), and (c) you're already signed up to it.\n\nYou set up a store by providing a comma separated file, which is\nparsed, converted to [JSON](../..//wiki.html?target=JSON) and\nloaded (asynchronously) when any page of the website is loaded.  The\ncomma separated file can easily be output from a database.\n\nIn order to take advantage of the link between exhibits and items in\nthe shop you either have to extend your database to include this\ninformation or provide a structured text file which specifies this\nlinkage.\n\nOur guides work offline.  This inevitably limits the amount of data\nwhich can be stored for any shop. An offline shop should not contain\nmore than 250 items.  If you need more then online mode should be used\n(see our discussion below).\n\nWhen you're offline you can't buy anything, as an Internet connection\nis required to charge a credit card.  You can fill your shopping cart\nwhile offline, but if you try to pay you'll get a message telling you\nyou're offline and offering to provide a reminder as soon as you get\nonline again.  This reminder can only be sent when the guide is being\ndisplayed. This limitation is inevitable and means that you should\nmake sure that there is either 3G or WiFi coverage at the entrances\nand exits to the collection, if not throughout.\n\n## Web analytics with Guides\n\nWeb analytics are in widespread use for desktop web sites.  Analytics\nfor mobile guides are even more powerful as information is available\nabout the route visitors take through the collection via the order of\npages visited.  Analytics can be used to optimise the information\nprovided in the guide and to track and optimise the performance of the\nshop. \n\nStandard analytics packages such as Google Analytics has a \nproblem when used with guides -- you don't get information when\nyou're offline.\n\nWe are actively looking at solutions to this issue. As with shopping\nthe best solution is store tracking information when offline and send\nit when online again. We are looking at ways of doing this with Google\nanalytics. \n\nWe have location information from visitors by assuming location from\nshort URL and QR code inputs, together with keypad inputs.  The\nmapping feature of our guides\n[e.g see here](../../http://xstatic.s3-website-eu-west-1.amazonaws.com/tim@timniblett.net/botanics/diagrams/botanics.html)\nprovides location.  It may prove useful for Cilogi to provide its own\nAnalytic information, or to process third party information such as\nfrom Google Analytics to allow collections to examine vistors' paths\nthrough the collection.\n\n## Offline guides\n\nIn many collections 3G is not available -- building can be problematic\n-- and WiFi has not been installed.  In these circumstances it is more\ndifficult to provide a mobile guide.\n\nOur guides can be available offline.\n[Offline caching](../../http://www.w3.org/TR/html5/offline.html) of\napplications is an HTML5 feature which Cilogi implements as an option\nfor each guide.\n\nOf course, an offline guide has to be downloaded at some point. The\nsimplest way to enable this is to provide WiFi at the entrance to the\ncollection, or to make sure that WiFi and/or 3G is available\nthroughout the collection, if not everywhere.  Its tactful to _not_\nplace QR codes and short URLs in places where there is no connection!\n\nThe current state of mobile browsers means that offline sites cannot\nbe larger that 5 or 10MB on the major platforms.  This is not enough\nfor many Cilogi guides.  We therefore use\n[WebSQL](../../http://www.w3.org/TR/webdatabase) to extend this to 50MB or\nmore.  WebSQL is due to be superseded, at which point we will need to\nlook for another solution.\n\nOffline web sited require a radical change in architecture. Cilogi has\nsuch an architecture. Our architecture is client-centric.  The flow of\ncontrol between pages occurs on the mobile phone and services are\nrequested from central servers as required. No service is essential,\nguaranteeing that visitors have an excellent experience when offline.\n\nWhen offline, pages must be stored or generated on the client. A\npre-compiled static page is usually sufficient.  When it is not (for\nexample to generate dynamic views of an online store) a database,\ntemplates and control code must be present on the client.  \n\nOur compilation process sets up all these when the website is\ngenerated.  Databases are stored as JSON with query access via canned\nJavaScript code. The JSON is usually embedded into JavaScript files,\nand thereby loaded when the website is first accessed.\n\nFor the guides to work offline its essential that all the code is\nloaded with the first page.  For a medium-sized site with full text\nsearch the volume of code will be less than 500KB.\n\nOur guides function as single page websites, and aggressive caching is\nused (unique file names and far future expiry) so that this hit only\nhappens on initial load.\n\nThree examples of the architectural implications of offline websites\nas guides:\n\n### Templating and databases\n\nShopping pages are traditionally generated by using a database, containing\ninformation about the items available, offers, etc. and a set of\ntemplates which are filled in using information from the database.\n\nCilogi generates shopping pages in much the same way except that the\ntemplates are client-side (using jQuery Templates) and the database is\nconverted at compile time into a JSON file which is loaded on startup\nas part of the code base. \n\n### Search\n\n![Full text search interface.  Search works offline and for dynamically added content](../../media/images/search.png)\n\nCilogi provides a simple full text search facility.  As with the database\nit is possible to generate an inverted index at compile time and we do\nthis. However, we also allow additional pages from Wikipedia and other\nsources to be added at runtime, so a hybrid strategy is used for\nsearch, with additional pages being processed on-the-fly in JavaScript.\n\n### Tours\n\nA tour is an ordered sequence of stops, each stop of which is an\nexhibit or feature of the collection.  Cilogi supports tours in two\nways. \n\n1. A tour is _compiled_ when the guide is generated.  Compilation\n   involves getting the tour definition, basically a list of exhibits,\n   from a database or structured text file, creating an overview page\n   for the tour and inserting links into page of the tour.\n2. The tour specification is downloaded when the guide is accessed.\n   The overview page is generated on the fly using a template, and the\n   individual tour pages are modified on the fly to add the necessary\n   links. \n\nWhich of these approaches is best depends on whether a single page\ncan be part of more than one tour. If so, then the second approach is\nmandated. Otherwise the first is simpler.\n\n![A tour page built from a client-side template and a tour specification](../../media/images/tour-page.jpg)\n\nA couple of points should be made about each approach.  In the\ncompilation approach links are inserted directly into the HTML\ndocument, using the [Jsoup](../../http://jsoup.org) HTML5 parser. This is\nsignificant as it means that tours operate as a _module_.  A tour can\nbe added simply by adding its specification.  You don't have to htink\nabout how this feature will interact with others.\n\nThe on-the-fly approach depends on (a) use of persistent storage -- we\nuse [HTML local storage](../../http://dev.w3.org/html5/webstorage) and (b)\nthe ability to intercept and modify pages before they are displayed.\nThis latter ability is provided by the\n[jQuery Mobile](../..//wiki.html?target=JQuery_Mobile) framework,\nwhich is the web framework we use.  jQuery Mobile provides first class\nsupport for iOS, Android and Blackberry 6.\n\n## Integration with Wikipedia and Wikitravel\n\nNo-one has the resources to provide comprehensive information relating\nto all the exhibits in a collection. For instance a gallery may have a\nwork by\n[Alberto Giacometti](../..//wiki.html?target=Alberto_Giacometti)\non display. As a visitor I may be interested in looking at other work,\noutside the collection, by this artist and then following up on these\nartists. Its just not possible to provide all this information as a\nsingle organisation.\n\nLinking to Wikipedia provides the ability to explore more widely from\na given starting point.\n\nWikipedia (and WikiTravel) content can be incorporated in three ways\ninto Cilogi guides:\n\n* A link to Wikipedia can be included in text;\n* The\n  [transclusion](../..//wiki.html?target=Wikipedia:Transclusion)\n  of a Wikipedia article can be included on a page; \n\n  ![Transclusion of a Wikipedia article, starting with the image of Black Pepper](../../media/images/pepper.jpg)\n\n* A page can just _be_ a Wikipedia page.\n\nIn each of these three cases the Wikipedia content is available\noffline and is a fully integrated part of the guide.  In addition any\nWikipedia pages visited via links are available offline and are\nindexed by our full text search capability.\n\n## File-based content management system\n\nAuthors can generate guides just by editing text files, and by\ndropping images into the appropriate directory. Work can be shared, so\nthat multiple authors can work  on a guide simultaneously.\n\nPages are written in [Markdown](../..//wiki.html?target=Markdown), a simple markup\nlanguage which allows pages to be created with a simple text editor.\nHere is an example:\n\n    # Title\n\n    Markdown is structured text, like Wiki syntax \n    but simpler.\n\n    * Lists are easy\n    * just use an asterisk\n    * Links [like this](../..//wiki.html?target=Link)\n\n    ![An image](../../media/images/sample.png)\n\n\nAuthors work on a local folder attached to\n[Dropbox](../../https://www.dropbox.com). An author signs up to Cilogi and\nreceives an invitation to share a Dropbox folder.  Any changes and\nedits are automatically shared with Cilogi.  Cilogi monitors the file\nsystem and any changes to a marker file trigger compilation and launch\nof the guide.  \n\nCilogi checkmarks each version of the site (using Git)\nand any recent version can be recovered if there is a problem.  A new\nversion must be approved before it moves from staging, so the author\ncan check and approve a guide before it is launched to the public.\n\nIt is possible to edit guides remotely using the Chrome Web Browser\nand the [SourceKit](../../https://github.com/kenotron/sourcekit) editor.\n\nCollaborative work on articles can be performed on Wikipedia or other\nopen wikis.  There are also a number of closed wiki tools that can be\nused, and which have an API Cilogi can access.  This is the most\nappropriate mechanism for public collaboration on guides.\n\n## Free to develop and deliver\n\nIt is free to develop guides, and free to deliver them to visitors.\nYou retain ownership of the content, which sits in a folder on your\ncomputer. \n\nWe are using cloud infrastructure, currently from Amazon with\n[S3](../..//wiki.html?target=Amazon_S3), Google with\n[App Engine](../..//wiki.html?target=App_Engine) and\n[Dropbox](../..//wiki.html?target=Dropbox_(service)).\n\nUsing the cloud eliminated fixed infrastructure costs, and to a large\nextent the requirement for in-house maintenance.  Costs are\nfurther reduced by minimizing work beyond simple file serving.\nExtensive customization of pages, a la Facebook, for each individual\nuser can be very expensive in computing resources, particularly for\nbursty traffic.\n\nCilogi's architecture is that of a JavaScript(CoffeeScript, Dart, GWT\nif you prefer) application on the client with\n[REST](../..//wiki.html?target=Representational_state_transfer)\nservices provided from Cilogi's infrastructure.\n\nMobile phones are personal devices so JavaScript-based customization\non a per-user basis works well and provides most of what a\nserver-based solution can.  Services such as\n[Disqus](../..//wiki.html?target=Disqus), work on mobile websites\nand require only JavaScript (and\n[JSON](../../http://en.wikipedia.org/wiki.html?target=JSONP)). If\nnecessary it is possible to password protect sensitive information via\nencryption.\n\n-----\n\nCilogi currently works on two cloud platforms,\n[Amazon S3](../..//wiki.html?target=Amazon_S3) and\n[Google App Engine](../..//wiki.html?target=App_Engine). Amazon\nS3 supports purely static sites, with web services only available via\nJSONP.  App Engine provides a scalable full-service platform.\n\nCareful design has been required for App Engine to ensure that costs are\ncontained.  Static web serving is possible from App Engine for very\nlittle more than the cost of outgoing data.\n\nAt present App Engine is used for services, although other platforms\ncan be used.  An advantage of App Engine is that images, which generate\nof about 80% of a site's outgoing bandwidth are served from Google's\nvery efficient content delivery network (CDN).  With conservative\nassumptions the total cost of delivering a complete guide will be about\n£0.005 per visitor."}